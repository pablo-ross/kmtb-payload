services:
  payload-prod:
    container_name: prod
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    volumes:
      - ./media:/app/media
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - payload-network

  payload-dev:
    container_name: dev
    image: node:20-alpine
    working_dir: /app
    ports:
      - "${APP_PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "npm install -g pnpm && pnpm install && pnpm run dev"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - payload-network
    profiles:
      - dev

  mongo:
    container_name: mongo
    image: mongo:6
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-payload}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - payload-network

volumes:
  mongo_data:
    name: mongo

networks:
  payload-network:
    driver: bridge
    name: payload